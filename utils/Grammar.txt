
 // LL(1) grammar ('' is ε):


Program -> program id ; ConstBlock VarBlock MainCode

MainCode -> begin StatementList end .

ConstBlock -> const ConstList
ConstBlock -> ''

ConstList -> id = Value ; ConstList
ConstList -> ''

VarBlock -> var VarList
VarBlock -> ''

VarList -> VarDecl : Type ; VarList
VarList -> ''


VarDecl -> id VarDecl’
VarDecl’ -> , VarDecl
VarDecl’ -> ''

Type -> string
Type -> real
Type -> int

StatementList -> Statement StatementList’
StatementList’ -> StatementList
StatementList’ -> ''

Statement -> ForStatement
Statement -> IfStatement
Statement -> Assign
Statement -> WriteLn
Statement -> Write
Statement -> break
Statement -> continue

BlockStatement -> begin StatementList end
BlockStatement -> StatementList //new

ForStatement -> for id := Value To Expr do BlockStatement ;


IfStatement -> if ( Expr ) then BlockStatement IfStatement’
IfStatement’ -> ;
IfStatement’ -> else BlockStatement ;


WriteLn -> writeln ( Expr ) ;
Write -> write ( Expr ) ;
To -> to
To -> downto

Assign -> id := Expr ;

Expr -> not Expr Expr’
Expr -> Expr2 Expr’
Expr’ -> BooleanOp Expr2 Expr’
Expr’ -> ''

Expr2 -> Expr3 Expr2’
Expr2’ -> RelOp Expr3 Expr2’
Expr2’ -> ''


Expr3 -> Term Expr3’
Expr3’ -> + Term Expr3’
Expr3’ -> - Term Expr3’
Expr3’ -> ''


Term -> Factor Term’
Term’ -> * Factor Term’
Term’ -> / Factor Term’
Term’ -> div Factor Term’
Term’ -> mod Factor Term’
Term’ -> ''

Factor -> id
Factor -> Value
Factor -> ( Expr )

RelOp -> eq
RelOp -> ne
RelOp -> lt
RelOp -> le
RelOp -> ge
RelOp -> gt

BooleanOp -> and
BooleanOp -> or


Value -> v_string
Value -> v_real
Value -> v_int

